{"version":3,"sources":["components/SearchBar/SearchBar.tsx","components/RecipeCard/RecipeCard.tsx","components/CardGrid/CardGrid.tsx","components/AppTitleBar/AppTitleBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBar","props","useState","SearchQuery","setSearchQuery","HasFocus","setHasFocus","className","Grid","container","spacing","justify","item","xs","sm","TextField","required","autoFocus","id","helperText","variant","error","onClick","value","onChange","e","s","target","Button","color","length","UserInput","SetUserInput","useStyles","makeStyles","theme","ImageThumbContainer","display","overflow","height","paddingTop","backgroundRepeat","backgroundPosition","backgroundSize","borderRadius","breakpoints","only","RecipeCard","classes","Card","raised","CardContent","style","backgroundImage","Recipe","image","direction","alignItems","Typography","align","title","missedIngredientCount","UrlCache","dataString","localStorage","getItem","JSON","parse","window","open","key","process","REACT_APP_SPOONACULAR_API_KEY","url","fetch","then","response","status","json","data","sourceUrl","setItem","stringify","catch","err","console","log","serveRecipe","ExitToApp","require","config","CardGrid","ItemArray","setItemArray","IsLoading","setIsLoading","Msg","Success","TextDisplay","AppStatus","setAppStatus","useEffect","msg","Cards","forEach","el","i","push","md","lg","CircularProgress","AppTitleBar","AppBar","position","Toolbar","Box","ml","createMuiTheme","palette","type","primary","main","secondary","values","xl","App","setUserInput","mt","mb","a","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ce17b3e1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './SearchBar.css';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { IUserInput } from '../../common/interface'\r\n\r\ninterface ISearchBarProps {\r\n    SetUserInput: (a: IUserInput) => void;\r\n}\r\n\r\nfunction SearchBar(props: ISearchBarProps) {\r\n\r\n    //state\r\n    const [SearchQuery, setSearchQuery] = useState<string | null>('')\r\n    const [HasFocus, setHasFocus] = useState<boolean>(false);\r\n\r\n    //handlers\r\n    const handleSubmit = () => {\r\n        if (SearchQuery?.length !== 0 && SearchQuery !== null && SearchQuery !== \"\") {\r\n            let UserInput: IUserInput = {\r\n                SearchQuery: SearchQuery,\r\n            }\r\n            props.SetUserInput(UserInput);\r\n        } else {\r\n            setHasFocus(true);\r\n        }\r\n    }\r\n    const handleSearchQueryChange = (s: string | null) => {\r\n        setSearchQuery(s);\r\n    }\r\n\r\n    //render\r\n    return (\r\n        <div className=\"SearchBarContainer\">\r\n            <Grid container spacing={3} justify='center'>\r\n                {/* Text Field */}\r\n                <Grid item xs={12} sm={'auto'}>\r\n                    <TextField\r\n                        required\r\n                        autoFocus\r\n                        id=\"outlined-required\"\r\n                        helperText='eg. Potato'\r\n                        variant=\"standard\"\r\n                        error={HasFocus && SearchQuery === \"\"}\r\n                        onClick={() => setHasFocus(true)}\r\n                        value={SearchQuery}\r\n                        onChange={e => handleSearchQueryChange(e.target.value)}\r\n                    />\r\n                </Grid>\r\n\r\n                {/* Submit Button */}\r\n                <Grid item xs={12} sm={'auto'}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n                        Search\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\nimport './RecipeCard.css';\r\nimport { Button, Grid, Typography, Card, CardContent } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ExitToApp } from '@material-ui/icons';\r\nimport { IRecipe } from '../../common/spoonacular_api_interface'\r\nimport { IUrlCache } from '../../common/interface';\r\n\r\ninterface ICardProps {\r\n    Recipe: IRecipe;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ImageThumbContainer: {\r\n        display: 'block',\r\n        overflow: 'hidden',\r\n        height: 0,\r\n        paddingTop: '100%',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '4px',\r\n        [theme.breakpoints.only('xs')]: {\r\n            paddingTop: '40%',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction RecipeCard(props: ICardProps) {\r\n    const classes = useStyles();\r\n    const serveRecipe = (id: number) => {\r\n\r\n        //fetch urls\r\n        let UrlCache: IUrlCache = (() => {\r\n            const dataString = localStorage.getItem('URLCache')\r\n            if (dataString) {\r\n                return JSON.parse(dataString)\r\n            } else {\r\n                return {};\r\n            }\r\n        })();\r\n\r\n        if (UrlCache[id]) {\r\n            window.open(UrlCache[id])\r\n        } else {\r\n            //fetch url from server and store\r\n            const key = process.env.REACT_APP_SPOONACULAR_API_KEY\r\n            const url = `https://api.spoonacular.com/recipes/${id}/information?includeNutrition=false&apiKey=${key}`\r\n            fetch(url).then(function (response) {\r\n                if (response.status !== 200) { return };\r\n\r\n                response.json().then(function (data) {\r\n                    UrlCache[id] = data.sourceUrl\r\n                    localStorage.setItem('URLCache', JSON.stringify(UrlCache))\r\n                    window.open(data.sourceUrl)\r\n                });\r\n            }\r\n            ).catch(function (err) {\r\n                console.log('Fetch Error :-S', err);\r\n            });\r\n        }\r\n    }\r\n\r\n    //render\r\n    return (\r\n        <div className=\"CardContainer\">\r\n            <Card raised>\r\n                <CardContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={5}>\r\n                            <div className={classes.ImageThumbContainer} style={{\r\n                                backgroundImage: 'url(' + props.Recipe.image + ')'\r\n                            }}>\r\n                            </div>\r\n\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"flex-start\"\r\n                            spacing={2}\r\n                            xs\r\n                        >\r\n                            {/*Panel goes here */}\r\n                            <Grid item xs>\r\n                                {/*Title goes here */}\r\n                                <Typography variant=\"h5\" align='left'>{props.Recipe.title}</Typography>\r\n                                <Typography variant='subtitle1' align='left' color='textSecondary'>Extra ingredients: <b>{props.Recipe.missedIngredientCount}</b></Typography>\r\n                            </Grid>\r\n                            <Grid item container direction=\"row\" justify=\"flex-end\">\r\n                                <Grid item >\r\n                                    <Button variant=\"contained\" color=\"primary\" onClick={() => { serveRecipe(props.Recipe.id) }}>\r\n                                        View Recipe &nbsp; <ExitToApp />\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default RecipeCard","import React, { useState, useEffect } from 'react';\r\nimport './CardGrid.css';\r\nimport { Grid, CircularProgress, Typography } from '@material-ui/core';\r\nimport RecipeCard from '../RecipeCard/RecipeCard'\r\nimport { IStatus } from '../../common/interface'\r\nimport { IRecipe } from '../../common/spoonacular_api_interface'\r\nrequire('dotenv').config()\r\n\r\ninterface ICardGridProps {\r\n    SearchQuery: (string | null);\r\n};\r\n\r\nfunction CardGrid(props: ICardGridProps) {\r\n\r\n    //state\r\n    const [ItemArray, setItemArray] = useState<IRecipe[]>([])\r\n    const [IsLoading, setIsLoading] = useState<Boolean>(false)\r\n    const [AppStatus, setAppStatus] = useState<IStatus>({\r\n        Msg: 'Enter an ingredient to get recipe suggestions...',\r\n        Success: false,\r\n        TextDisplay: 'textSecondary'\r\n    })\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (!props.SearchQuery) {\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        const key = process.env.REACT_APP_SPOONACULAR_API_KEY;\r\n        const url = `https://api.spoonacular.com/recipes/findByIngredients?ingredients=${props.SearchQuery}&number=6&apiKey=${key}`\r\n        fetch(url)\r\n            .then(\r\n                function (response) {\r\n                    if (response.status !== 200) {\r\n                        let msg;\r\n                        switch (response.status) {\r\n                            case 401:\r\n                                msg = 'Unauthorized request, likely bad API key.'\r\n                                break;\r\n                            case 402:\r\n                                msg = 'Daily quota exceeded for API calls.'\r\n                                break;\r\n                        }\r\n                        setAppStatus({\r\n                            Msg: `${msg} Status Code: ${response.status}`,\r\n                            Success: false,\r\n                            TextDisplay: 'error'\r\n                        })\r\n                        setIsLoading(false)\r\n                        return;\r\n                    }\r\n\r\n                    // Examine the text in the response\r\n                    response.json().then(function (data) {\r\n                        setAppStatus({\r\n                            Msg: \"No results found\",\r\n                            Success: (data.length > 0 ? true : false),\r\n                            TextDisplay: 'error',\r\n                        })\r\n                        setItemArray(data);\r\n                        setIsLoading(false)\r\n                    });\r\n\r\n                }\r\n            )\r\n            .catch(function (err) {\r\n                console.log('Fetch Error :-S', err);\r\n                setIsLoading(false)\r\n            });\r\n    }, [props.SearchQuery])\r\n\r\n    var Cards: JSX.Element[] = [];\r\n    ItemArray.forEach((el: IRecipe, i: Number) => {\r\n        if (!el) {\r\n            return;\r\n        }\r\n        Cards.push(\r\n            <Grid key={`card_${i} `} item xs={12} md={6} lg={4} className='MediaGridCard'>\r\n                <RecipeCard Recipe={el} />\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"CardGridContainer\">\r\n            <Grid container direction=\"row\" justify=\"center\">\r\n\r\n                <Grid\r\n                    item\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"baseline\"\r\n                    spacing={5}\r\n                    xs={10}\r\n                    lg={11}\r\n                >\r\n                    {(AppStatus.Success && !IsLoading) && Cards}\r\n                    {(!AppStatus.Success && !IsLoading) && <Typography variant=\"subtitle1\" color={AppStatus.TextDisplay}>{AppStatus.Msg}</Typography>}\r\n                    {IsLoading && <CircularProgress />}\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CardGrid","import React, { useState } from 'react';\r\nimport './AppTitleBar.css';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport { Box, Typography, AppBar, Toolbar, Button } from '@material-ui/core';\r\nimport { spacing } from '@material-ui/system'\r\n\r\ninterface IAppTitleBarProps { };\r\n\r\n\r\nfunction AppTitleBar(props: IAppTitleBarProps) {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n\r\n                <EmojiObjectsIcon />\r\n                <Box ml={1}>\r\n                    <Typography variant=\"h6\" >\r\n                        Recipe Ideas\r\n                </Typography>\r\n                </Box>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default AppTitleBar","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { IUserInput } from './common/interface'\r\nimport { createMuiTheme, Box, MuiThemeProvider, CssBaseline, Typography } from '@material-ui/core';\r\n\r\n//components\r\nimport SearchBar from './components/SearchBar/SearchBar'\r\nimport CardGrid from './components/CardGrid/CardGrid'\r\nimport AppTitleBar from './components/AppTitleBar/AppTitleBar'\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    primary: {\r\n      main: '#91c12f',\r\n    },\r\n    secondary: {\r\n      main: '#fcd734',\r\n    },\r\n  },\r\n  breakpoints: {\r\n    values: {\r\n      xs: 0,\r\n      sm: 700,\r\n      md: 960,\r\n      lg: 1280,\r\n      xl: 1920,\r\n    },\r\n  },\r\n})\r\n\r\nfunction App() {\r\n\r\n  const [UserInput, setUserInput] = useState<IUserInput>({\r\n    SearchQuery: null,\r\n  });\r\n\r\n  function SetUserInput(a: IUserInput) {\r\n    setUserInput(a);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <MuiThemeProvider theme={theme}>\r\n        <AppTitleBar />\r\n        <Box mt={6} mb={5}>\r\n          <Typography>Enter an ingredient to explore recipes:</Typography>\r\n        </Box>\r\n        <SearchBar SetUserInput={(a: IUserInput) => SetUserInput(a)} />\r\n        <CardGrid SearchQuery={UserInput.SearchQuery} />\r\n        <CssBaseline />\r\n      </MuiThemeProvider>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}